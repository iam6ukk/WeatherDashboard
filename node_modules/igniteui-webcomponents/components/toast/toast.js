var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, LitElement } from 'lit';
import { property } from 'lit/decorators.js';
import { AnimationPlayer } from '../../animations/player.js';
import { fadeIn, fadeOut } from '../../animations/presets/fade/index.js';
import { themes } from '../../theming/theming-decorator.js';
import { registerComponent } from '../common/definitions/register.js';
import { styles } from './themes/light/toast.base.css.js';
import { styles as bootstrap } from './themes/light/toast.bootstrap.css.js';
import { styles as fluent } from './themes/light/toast.fluent.css.js';
import { styles as indigo, styles as material, } from './themes/light/toast.indigo.css.js';
let IgcToastComponent = class IgcToastComponent extends LitElement {
    constructor() {
        super(...arguments);
        this.open = false;
        this.displayTime = 4000;
        this.keepOpen = false;
        this.position = 'bottom';
    }
    static register() {
        registerComponent(this);
    }
    firstUpdated() {
        this.animationPlayer = new AnimationPlayer(this);
    }
    async toggleAnimation(dir) {
        const animation = dir === 'open' ? fadeIn : fadeOut;
        const [_, event] = await Promise.all([
            this.animationPlayer.stopAll(),
            this.animationPlayer.play(animation()),
        ]);
        return event.type === 'finish';
    }
    async hide() {
        if (this.open) {
            await this.toggleAnimation('close');
            this.open = false;
        }
    }
    show() {
        window.clearTimeout(this.displayTimeout);
        if (!this.open) {
            this.toggleAnimation('open');
            this.open = true;
        }
        if (this.keepOpen === false) {
            this.displayTimeout = setTimeout(async () => {
                await this.toggleAnimation('close');
                this.open = false;
            }, this.displayTime);
        }
    }
    toggle() {
        if (this.open) {
            this.hide();
        }
        else {
            this.show();
        }
    }
    connectedCallback() {
        super.connectedCallback();
        if (!this.hasAttribute('role')) {
            this.setAttribute('role', 'alert');
        }
        if (!this.hasAttribute('aria-live')) {
            this.setAttribute('aria-live', 'polite');
        }
    }
    render() {
        return html `<slot></slot>`;
    }
};
IgcToastComponent.tagName = 'igc-toast';
IgcToastComponent.styles = [styles];
__decorate([
    property({ type: Boolean, reflect: true })
], IgcToastComponent.prototype, "open", void 0);
__decorate([
    property({ type: Number, reflect: false, attribute: 'display-time' })
], IgcToastComponent.prototype, "displayTime", void 0);
__decorate([
    property({ type: Boolean, reflect: true, attribute: 'keep-open' })
], IgcToastComponent.prototype, "keepOpen", void 0);
__decorate([
    property({ reflect: true, attribute: 'position' })
], IgcToastComponent.prototype, "position", void 0);
IgcToastComponent = __decorate([
    themes({
        light: { bootstrap, fluent, indigo, material },
        dark: { bootstrap, fluent, indigo, material },
    })
], IgcToastComponent);
export default IgcToastComponent;
//# sourceMappingURL=toast.js.map