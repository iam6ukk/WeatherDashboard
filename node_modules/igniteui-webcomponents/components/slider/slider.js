var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html } from 'lit';
import { property } from 'lit/decorators.js';
import { watch } from '../common/decorators/watch.js';
import { registerComponent } from '../common/definitions/register.js';
import { EventEmitterMixin } from '../common/mixins/event-emitter.js';
import { FormAssociatedMixin } from '../common/mixins/form-associated.js';
import { IgcSliderBaseComponent } from './slider-base.js';
import IgcSliderLabelComponent from './slider-label.js';
class IgcSliderComponent extends FormAssociatedMixin(EventEmitterMixin(IgcSliderBaseComponent)) {
    constructor() {
        super(...arguments);
        this.value = 0;
    }
    static register() {
        registerComponent(this, IgcSliderLabelComponent);
    }
    valueChanged() {
        this.value = this.validateValue(this.value);
        this.setFormValue(`${this.value}`);
    }
    get activeValue() {
        return this.value;
    }
    normalizeValue() {
        this.value = this.validateValue(this.value);
    }
    getTrackStyle() {
        const position = this.valueToFraction(this.value);
        const filledTrackStyle = {
            width: `${position * 100}%`,
        };
        return filledTrackStyle;
    }
    updateValue(increment) {
        const oldValue = this.value;
        this.value = this.value + increment;
        if (oldValue === this.value) {
            return false;
        }
        this.emitInputEvent();
        return true;
    }
    emitInputEvent() {
        this.emitEvent('igcInput', { detail: this.value });
    }
    emitChangeEvent() {
        this.emitEvent('igcChange', { detail: this.value });
    }
    stepUp(stepIncrement = 1) {
        this.value = this.value + stepIncrement * this.step;
    }
    stepDown(stepDecrement = 1) {
        this.value = this.value - stepDecrement * this.step;
    }
    renderThumbs() {
        const ariaLabel = this.getAttribute('aria-label');
        if (ariaLabel) {
            this.removeAttribute('aria-label');
        }
        return html `${this.renderThumb(this.value, ariaLabel)}`;
    }
}
IgcSliderComponent.tagName = 'igc-slider';
__decorate([
    property({ type: Number })
], IgcSliderComponent.prototype, "value", void 0);
__decorate([
    watch('value')
], IgcSliderComponent.prototype, "valueChanged", null);
export default IgcSliderComponent;
//# sourceMappingURL=slider.js.map