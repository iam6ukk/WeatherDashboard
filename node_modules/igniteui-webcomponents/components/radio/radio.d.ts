import { LitElement } from 'lit';
import { Constructor } from '../common/mixins/constructor.js';
import { Validator } from '../common/validators.js';
export interface IgcRadioEventMap {
    igcChange: CustomEvent<boolean>;
    igcFocus: CustomEvent<void>;
    igcBlur: CustomEvent<void>;
}
declare const IgcRadioComponent_base: Constructor<import("../common/mixins/form-associated-required.js").FormRequiredInterface & import("../common/mixins/form-associated.js").FormAssociatedElementInterface> & import("../common/mixins/constructor.js").AbstractConstructor<import("../common/mixins/event-emitter.js").EventEmitterInterface<IgcRadioEventMap>> & Constructor<LitElement>;
/**
 * @element igc-radio
 *
 * @slot - The radio label.
 *
 * @fires igcChange - Emitted when the control's checked state changes.
 * @fires igcFocus - Emitted when the control gains focus.
 * @fires igcBlur - Emitted when the control loses focus.
 *
 * @csspart base - The radio control base wrapper.
 * @csspart control - The radio control.
 * @csspart label - The radio control label.
 */
export default class IgcRadioComponent extends IgcRadioComponent_base {
    static readonly tagName = "igc-radio";
    protected static styles: import("lit").CSSResult;
    static register(): void;
    private static readonly increment;
    protected validators: Validator<this>[];
    private inputId;
    private labelId;
    protected input: HTMLInputElement;
    protected label: Array<Node>;
    private _tabIndex;
    private focused;
    protected hideLabel: boolean;
    private get radioGroup();
    protected setDefaultValue(): void;
    /**
     * The value attribute of the control.
     * @attr
     */
    value: string;
    /**
     * The checked state of the control.
     * @attr
     */
    checked: boolean;
    /**
     * The label position of the radio control.
     * @attr label-position
     */
    labelPosition: 'before' | 'after';
    constructor();
    /** Simulates a click on the radio control. */
    click(): void;
    /** Sets focus on the radio control. */
    focus(options?: FocusOptions): void;
    /** Removes focus from the radio control. */
    blur(): void;
    /**
     * Sets a custom validation message for the control.
     * As long as `message` is not empty, the control is considered invalid.
     */
    setCustomValidity(message: string): void;
    protected requiredChange(): void;
    private _updateCheckedState;
    private _updateUncheckedState;
    protected checkedChanged(): void;
    protected handleMouseDown(event: PointerEvent): void;
    protected handleClick(): void;
    protected handleBlur(): void;
    protected handleFocus(): void;
    protected handleKeyUp(): void;
    protected handleKeyDown(event: KeyboardEvent): void;
    protected handleSlotChange(): void;
    protected render(): import("lit-html").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'igc-radio': IgcRadioComponent;
    }
}
export {};
