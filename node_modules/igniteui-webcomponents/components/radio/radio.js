var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var IgcRadioComponent_1;
import { html, LitElement } from 'lit';
import { property, query, queryAssignedNodes, state } from 'lit/decorators.js';
import { ifDefined } from 'lit/directives/if-defined.js';
import { live } from 'lit/directives/live.js';
import { themes } from '../../theming/theming-decorator.js';
import { alternateName } from '../common/decorators/alternateName.js';
import { blazorTwoWayBind } from '../common/decorators/blazorTwoWayBind.js';
import { watch } from '../common/decorators/watch.js';
import { registerComponent } from '../common/definitions/register.js';
import messages from '../common/localization/validation-en.js';
import { EventEmitterMixin } from '../common/mixins/event-emitter.js';
import { FormAssociatedRequiredMixin } from '../common/mixins/form-associated-required.js';
import { any, createCounter, isLTR, partNameMap, wrap, } from '../common/util.js';
import { styles } from './themes/light/radio.base.css.js';
import { styles as bootstrap } from './themes/light/radio.bootstrap.css.js';
import { styles as fluent } from './themes/light/radio.fluent.css.js';
import { styles as indigo } from './themes/light/radio.indigo.css.js';
import { styles as material } from './themes/light/radio.material.css.js';
const arrowKeys = new Set(['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight']);
const arrowKeyDelta = new Map(Object.entries({
    ArrowUp: () => -1,
    ArrowLeft: (ltr) => (ltr ? -1 : 1),
    ArrowRight: (ltr) => (ltr ? 1 : -1),
    ArrowDown: () => 1,
}));
let IgcRadioComponent = IgcRadioComponent_1 = class IgcRadioComponent extends FormAssociatedRequiredMixin(EventEmitterMixin(LitElement)) {
    static register() {
        registerComponent(this);
    }
    get radioGroup() {
        const radios = Array.from(document.querySelectorAll(`${this.tagName}[name='${this.name}']`));
        const nonDisabled = [];
        const siblings = [];
        for (const radio of radios) {
            if (!radio.disabled) {
                nonDisabled.push(radio);
            }
            if (!radio.isSameNode(this)) {
                siblings.push(radio);
            }
        }
        return { radios, nonDisabled, siblings };
    }
    setDefaultValue() {
        const firstChecked = this.radioGroup.radios.find((r) => r.checked);
        if (firstChecked && firstChecked.isSameNode(this)) {
            this._defaultValue = true;
        }
        else {
            this._defaultValue = false;
        }
    }
    constructor() {
        super();
        this.validators = [
            {
                key: 'valueMissing',
                message: messages.required,
                isValid: () => {
                    const { radios } = this.radioGroup;
                    return any(radios, 'required') ? any(radios, 'checked') : true;
                },
            },
        ];
        this.inputId = `radio-${IgcRadioComponent_1.increment()}`;
        this.labelId = `radio-label-${this.inputId}`;
        this._tabIndex = 0;
        this.focused = false;
        this.hideLabel = false;
        this.checked = false;
        this.labelPosition = 'after';
        this.addEventListener('keyup', this.handleKeyUp);
        this.addEventListener('keydown', this.handleKeyDown);
    }
    click() {
        this.input.click();
    }
    focus(options) {
        this.input.focus(options);
    }
    blur() {
        this.input.blur();
    }
    setCustomValidity(message) {
        const { radios } = this.radioGroup;
        for (const radio of radios) {
            radio.updateValidity(message);
            radio.setInvalidState();
        }
    }
    requiredChange() {
        const { radios } = this.radioGroup;
        for (const radio of radios) {
            radio.updateValidity();
            radio.setInvalidState();
        }
    }
    _updateCheckedState() {
        var _a;
        const siblings = this.radioGroup.siblings;
        this.setFormValue(this.value || 'on');
        this.updateValidity();
        this.setInvalidState();
        this._tabIndex = 0;
        (_a = this.input) === null || _a === void 0 ? void 0 : _a.focus();
        for (const radio of siblings) {
            radio.checked = false;
            radio._tabIndex = -1;
            radio.updateValidity();
            radio.setInvalidState();
        }
    }
    _updateUncheckedState() {
        const siblings = this.radioGroup.siblings;
        this.setFormValue(null);
        this.updateValidity();
        this.setInvalidState();
        if (this.hasUpdated) {
            this._tabIndex = -1;
        }
        for (const radio of siblings) {
            radio.updateValidity();
        }
    }
    checkedChanged() {
        this.checked ? this._updateCheckedState() : this._updateUncheckedState();
    }
    handleMouseDown(event) {
        event.preventDefault();
        this.input.focus();
        this.focused = false;
    }
    handleClick() {
        this.checked = true;
        this.emitEvent('igcChange', { detail: this.checked });
    }
    handleBlur() {
        this.emitEvent('igcBlur');
        this.focused = false;
    }
    handleFocus() {
        this.emitEvent('igcFocus');
    }
    handleKeyUp() {
        if (!this.focused) {
            this.focused = true;
        }
    }
    handleKeyDown(event) {
        if (!arrowKeys.has(event.key))
            return;
        event.preventDefault();
        const { nonDisabled } = this.radioGroup;
        const LTR = isLTR(this);
        const idx = wrap(0, nonDisabled.length - 1, nonDisabled.indexOf(this) + arrowKeyDelta.get(event.key)(LTR));
        const target = nonDisabled[idx];
        target.focus();
        target.checked = true;
        target.emitEvent('igcChange', { detail: target.checked });
    }
    handleSlotChange() {
        this.hideLabel = this.label.length < 1;
    }
    render() {
        const labelledBy = this.getAttribute('aria-labelledby');
        return html `
      <label
        part=${partNameMap({
            base: true,
            checked: this.checked,
            focused: this.focused,
        })}
        for=${this.inputId}
        @pointerdown=${this.handleMouseDown}
      >
        <input
          id=${this.inputId}
          type="radio"
          name=${ifDefined(this.name)}
          value=${ifDefined(this.value)}
          .required=${this.required}
          .disabled=${this.disabled}
          .checked=${live(this.checked)}
          tabindex=${this._tabIndex}
          aria-checked=${this.checked ? 'true' : 'false'}
          aria-disabled=${this.disabled ? 'true' : 'false'}
          aria-labelledby=${labelledBy ? labelledBy : this.labelId}
          @click=${this.handleClick}
          @blur=${this.handleBlur}
          @focus=${this.handleFocus}
        />
        <span part=${partNameMap({ control: true, checked: this.checked })}>
          <span
            .hidden=${this.disabled}
            part=${partNameMap({ ripple: true, checked: this.checked })}
          ></span>
        </span>
        <span
          .hidden=${this.hideLabel}
          part=${partNameMap({ label: true, checked: this.checked })}
          id=${this.labelId}
        >
          <slot @slotchange=${this.handleSlotChange}></slot>
        </span>
      </label>
    `;
    }
};
IgcRadioComponent.tagName = 'igc-radio';
IgcRadioComponent.styles = styles;
IgcRadioComponent.increment = createCounter();
__decorate([
    query('input[type="radio"]')
], IgcRadioComponent.prototype, "input", void 0);
__decorate([
    queryAssignedNodes({ flatten: true })
], IgcRadioComponent.prototype, "label", void 0);
__decorate([
    state()
], IgcRadioComponent.prototype, "_tabIndex", void 0);
__decorate([
    state()
], IgcRadioComponent.prototype, "focused", void 0);
__decorate([
    state()
], IgcRadioComponent.prototype, "hideLabel", void 0);
__decorate([
    property()
], IgcRadioComponent.prototype, "value", void 0);
__decorate([
    property({ type: Boolean }),
    blazorTwoWayBind('igcChange', 'detail')
], IgcRadioComponent.prototype, "checked", void 0);
__decorate([
    property({ reflect: true, attribute: 'label-position' })
], IgcRadioComponent.prototype, "labelPosition", void 0);
__decorate([
    alternateName('focusComponent')
], IgcRadioComponent.prototype, "focus", null);
__decorate([
    alternateName('blurComponent')
], IgcRadioComponent.prototype, "blur", null);
__decorate([
    watch('required', { waitUntilFirstUpdate: true })
], IgcRadioComponent.prototype, "requiredChange", null);
__decorate([
    watch('checked')
], IgcRadioComponent.prototype, "checkedChanged", null);
IgcRadioComponent = IgcRadioComponent_1 = __decorate([
    themes({
        light: { material, bootstrap, fluent, indigo },
        dark: { material, bootstrap, fluent, indigo },
    })
], IgcRadioComponent);
export default IgcRadioComponent;
//# sourceMappingURL=radio.js.map