{"version":3,"file":"input.js","sourceRoot":"","sources":["../../../src/components/input/input.ts"],"names":[],"mappings":"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","sourcesContent":["import { html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { live } from 'lit/directives/live.js';\nimport { alternateName } from '../common/decorators/alternateName.js';\nimport { blazorSuppress } from '../common/decorators/blazorSuppress.js';\nimport { blazorTwoWayBind } from '../common/decorators/blazorTwoWayBind.js';\nimport { watch } from '../common/decorators/watch.js';\nimport { registerComponent } from '../common/definitions/register.js';\nimport { partNameMap } from '../common/util.js';\nimport {\n  Validator,\n  maxLengthValidator,\n  maxValidator,\n  minLengthValidator,\n  minValidator,\n  patternValidator,\n  requiredNumberValidator,\n  requiredValidator,\n  stepValidator,\n} from '../common/validators.js';\nimport { IgcInputBaseComponent } from './input-base.js';\n\n/**\n * @element igc-input\n *\n * @slot prefix - Renders content before the input.\n * @slot suffix - Renders content after input.\n * @slot helper-text - Renders content below the input.\n *\n * @fires igcInput - Emitted when the control input receives user input.\n * @fires igcChange - Emitted when the control's checked state changes.\n * @fires igcFocus - Emitted when the control gains focus.\n * @fires igcBlur - Emitted when the control loses focus.\n *\n * @csspart container - The main wrapper that holds all main input elements.\n * @csspart input - The native input element.\n * @csspart label - The native label element.\n * @csspart prefix - The prefix wrapper.\n * @csspart suffix - The suffix wrapper.\n * @csspart helper-text - The helper text wrapper.\n */\nexport default class IgcInputComponent extends IgcInputBaseComponent {\n  public static readonly tagName = 'igc-input';\n\n  public static register() {\n    registerComponent(this);\n  }\n\n  private get isStringType() {\n    return this.type !== 'number';\n  }\n\n  protected override validators: Validator<this>[] = [\n    {\n      ...requiredValidator,\n      isValid: () =>\n        this.isStringType\n          ? requiredValidator.isValid(this)\n          : requiredNumberValidator.isValid(this),\n    },\n    {\n      ...minLengthValidator,\n      isValid: () =>\n        this.isStringType ? minLengthValidator.isValid(this) : true,\n    },\n    {\n      ...maxLengthValidator,\n      isValid: () =>\n        this.isStringType ? maxLengthValidator.isValid(this) : true,\n    },\n    {\n      ...minValidator,\n      isValid: () => (this.isStringType ? true : minValidator.isValid(this)),\n    },\n    {\n      ...maxValidator,\n      isValid: () => (this.isStringType ? true : maxValidator.isValid(this)),\n    },\n    {\n      ...stepValidator,\n      isValid: () => (this.isStringType ? true : stepValidator.isValid(this)),\n    },\n    {\n      ...patternValidator,\n      isValid: () =>\n        this.isStringType ? patternValidator.isValid(this) : true,\n    },\n  ];\n\n  /**\n   * The value of the control.\n   * @attr\n   */\n  @property()\n  @blazorTwoWayBind('igcChange', 'detail')\n  public value = '';\n\n  /**\n   * The type attribute of the control.\n   * @attr\n   */\n  @alternateName('displayType')\n  @property({ reflect: true })\n  public type:\n    | 'email'\n    | 'number'\n    | 'password'\n    | 'search'\n    | 'tel'\n    | 'text'\n    | 'url' = 'text';\n\n  // TODO: Deprecate\n  /**\n   * The input mode attribute of the control.\n   * @attr\n   */\n  @property()\n  public inputmode!:\n    | 'none'\n    | 'txt'\n    | 'decimal'\n    | 'numeric'\n    | 'tel'\n    | 'search'\n    | 'email'\n    | 'url';\n\n  /**\n   * The pattern attribute of the control.\n   * @attr\n   */\n  @property()\n  public pattern!: string;\n\n  /**\n   * The minimum string length required by the control.\n   * @attr minlength\n   */\n  @property({ type: Number, attribute: 'minlength' })\n  public minLength!: number;\n\n  /**\n   * The minlength attribute of the control.\n   * @prop\n   *\n   * @deprecated - since v4.4.0\n   * Use the `minLength` property instead.\n   */\n  @property({ attribute: false })\n  public get minlength() {\n    return this.minLength;\n  }\n\n  public set minlength(value: number) {\n    this.minLength = value;\n  }\n\n  /**\n   * The maximum string length of the control.\n   * @attr maxlength\n   */\n  @property({ type: Number, attribute: 'maxlength' })\n  public maxLength!: number;\n\n  /**\n   * The maxlength attribute of the control.\n   * @prop\n   *\n   * @deprecated - since v4.4.0\n   * Use the `maxLength` property instead.\n   */\n  @property({ attribute: false })\n  public get maxlength() {\n    return this.maxLength;\n  }\n\n  public set maxlength(value: number) {\n    this.maxLength = value;\n  }\n\n  /**\n   * The min attribute of the control.\n   * @attr\n   */\n  @property()\n  public min!: number | string;\n\n  /**\n   * The max attribute of the control.\n   * @attr\n   */\n  @property()\n  public max!: number | string;\n\n  /**\n   * The step attribute of the control.\n   * @attr\n   */\n  @property({ type: Number })\n  public step!: number;\n\n  /**\n   * The autofocus attribute of the control.\n   * @attr\n   */\n  @property({ type: Boolean })\n  public override autofocus!: boolean;\n\n  /**\n   * The autocomplete attribute of the control.\n   * @attr\n   */\n  @property()\n  public autocomplete!: string;\n\n  @property({ type: Number })\n  public override tabIndex = 0;\n\n  @watch('min', { waitUntilFirstUpdate: true })\n  @watch('max', { waitUntilFirstUpdate: true })\n  @watch('minLength', { waitUntilFirstUpdate: true })\n  @watch('maxLength', { waitUntilFirstUpdate: true })\n  @watch('pattern', { waitUntilFirstUpdate: true })\n  @watch('step', { waitUntilFirstUpdate: true })\n  protected constraintsChanged() {\n    this.updateValidity();\n  }\n\n  @watch('value')\n  protected valueChange() {\n    const value = this.value ? this.value : null;\n    this.setFormValue(value, value);\n    this.updateValidity();\n    this.setInvalidState();\n  }\n\n  /** Replaces the selected text in the input. */\n  @blazorSuppress()\n  public override setRangeText(\n    replacement: string,\n    start: number,\n    end: number,\n    selectMode: 'select' | 'start' | 'end' | 'preserve' = 'preserve'\n  ) {\n    super.setRangeText(replacement, start, end, selectMode);\n    this.value = this.input.value;\n  }\n\n  /** Selects all text within the input. */\n  public select() {\n    return this.input.select();\n  }\n\n  /** Increments the numeric value of the input by one or more steps. */\n  public stepUp(n?: number) {\n    this.input.stepUp(n);\n    this.value = this.input.value;\n  }\n\n  /** Decrements the numeric value of the input by one or more steps. */\n  public stepDown(n?: number) {\n    this.input.stepDown(n);\n    this.value = this.input.value;\n  }\n\n  private handleInput() {\n    this.value = this.input.value;\n    this.emitEvent('igcInput', { detail: this.value });\n  }\n\n  private handleChange() {\n    this.value = this.input.value;\n    this.emitEvent('igcChange', { detail: this.value });\n  }\n\n  protected override handleFocus(): void {\n    this._dirty = true;\n    super.handleFocus();\n  }\n\n  protected override handleBlur(): void {\n    this.invalid = !this.checkValidity();\n    super.handleBlur();\n  }\n\n  protected renderInput() {\n    return html`\n      <input\n        id=${this.inputId}\n        part=${partNameMap(this.resolvePartNames('input'))}\n        name=${ifDefined(this.name)}\n        type=${ifDefined(this.type)}\n        pattern=${ifDefined(this.pattern)}\n        placeholder=${ifDefined(this.placeholder)}\n        .value=${live(this.value)}\n        ?readonly=${this.readOnly}\n        ?disabled=${this.disabled}\n        ?required=${this.required}\n        ?autofocus=${this.autofocus}\n        tabindex=${this.tabIndex}\n        autocomplete=${ifDefined(this.autocomplete as any)}\n        inputmode=${ifDefined(this.inputmode)}\n        min=${ifDefined(this.min)}\n        max=${ifDefined(this.max)}\n        minlength=${ifDefined(this.minLength)}\n        maxlength=${ifDefined(this.maxLength)}\n        step=${ifDefined(this.step)}\n        aria-invalid=${this.invalid ? 'true' : 'false'}\n        @change=${this.handleChange}\n        @input=${this.handleInput}\n        @focus=${this.handleFocus}\n        @blur=${this.handleBlur}\n      />\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'igc-input': IgcInputComponent;\n  }\n}\n"]}