export const partNameMap = (partNameInfo) => {
    return Object.keys(partNameInfo)
        .filter((key) => partNameInfo[key])
        .join(' ');
};
export const asPercent = (part, whole) => (part / whole) * 100;
export const clamp = (number, min, max) => Math.max(min, Math.min(number, max));
export function getOffset(element, parent) {
    const { top, left, bottom, right } = element.getBoundingClientRect();
    const { top: pTop, left: pLeft, bottom: pBottom, right: pRight, } = parent.getBoundingClientRect();
    return {
        top: Math.round(top - pTop),
        left: Math.round(left - pLeft),
        right: Math.round(right - pRight),
        bottom: Math.round(bottom - pBottom),
    };
}
export function createCounter() {
    let i = 0;
    return function () {
        i++;
        return i;
    };
}
export function isLTR(element) {
    return getComputedStyle(element).getPropertyValue('direction') === 'ltr';
}
export function extractText(arr) {
    return arr.reduce((agg, item) => {
        var _a;
        const text = (_a = item.textContent) === null || _a === void 0 ? void 0 : _a.trim();
        if (text) {
            agg.push(text);
        }
        return agg;
    }, []);
}
export function format(template, ...params) {
    return template.replace(/{(\d+)}/g, function (match, index) {
        if (index >= params.length) {
            return match;
        }
        const value = params[index];
        if (typeof value !== 'number' && !value) {
            return '';
        }
        return value;
    });
}
export function asNumber(value, fallback = 0) {
    const parsed = parseFloat(value);
    return isNaN(parsed) ? fallback : parsed;
}
export function wrap(min, max, value) {
    if (value < min) {
        return max;
    }
    else if (value > max) {
        return min;
    }
    return value;
}
export function isDefined(value) {
    return value !== undefined;
}
export function any(arr, predicate) {
    if (predicate instanceof Function) {
        return arr.some(predicate);
    }
    return arr.some((item) => Boolean(item[predicate]));
}
//# sourceMappingURL=util.js.map