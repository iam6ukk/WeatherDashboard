import validatorMessages from './localization/validation-en.js';
import { asNumber, format, isDefined } from './util.js';
export const requiredValidator = {
    key: 'valueMissing',
    message: validatorMessages.required,
    isValid: ({ required, value }) => (required ? !!value : true),
};
export const requiredNumberValidator = {
    key: 'valueMissing',
    message: validatorMessages.required,
    isValid: ({ required, value }) => (required ? isDefined(value) : true),
};
export const requiredBooleanValidator = {
    key: 'valueMissing',
    message: validatorMessages.required,
    isValid: ({ required, checked }) => (required ? checked : true),
};
export const minLengthValidator = {
    key: 'tooShort',
    message: ({ minLength }) => format(validatorMessages.minLength, `${minLength}`),
    isValid: ({ minLength, value }) => minLength ? value.length >= minLength : true,
};
export const maxLengthValidator = {
    key: 'tooLong',
    message: ({ maxLength }) => format(validatorMessages.maxLength, `${maxLength}`),
    isValid: ({ maxLength, value }) => maxLength ? value.length <= maxLength : true,
};
export const patternValidator = {
    key: 'patternMismatch',
    message: validatorMessages.pattern,
    isValid: ({ pattern, value }) => pattern ? new RegExp(pattern, 'u').test(value) : true,
};
export const minValidator = {
    key: 'rangeUnderflow',
    message: ({ min }) => format(validatorMessages.min, `${min}`),
    isValid: ({ min, value }) => isDefined(min)
        ? isDefined(value) && asNumber(value) >= asNumber(min)
        : true,
};
export const maxValidator = {
    key: 'rangeOverflow',
    message: ({ max }) => format(validatorMessages.max, `${max}`),
    isValid: ({ max, value }) => isDefined(max)
        ? isDefined(value) && asNumber(value) <= asNumber(max)
        : true,
};
export const stepValidator = {
    key: 'stepMismatch',
    message: 'Value does not conform to step constraint',
    isValid: ({ min, step, value }) => isDefined(step)
        ? (asNumber(value) - asNumber(min)) % asNumber(step, 1) === 0
        : true,
};
//# sourceMappingURL=validators.js.map