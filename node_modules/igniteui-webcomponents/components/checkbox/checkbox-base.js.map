{"version":3,"file":"checkbox-base.js","sourceRoot":"","sources":["../../../src/components/checkbox/checkbox-base.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement } from 'lit';\nimport { property, query, queryAssignedNodes, state } from 'lit/decorators.js';\nimport { alternateName } from '../common/decorators/alternateName.js';\nimport { watch } from '../common/decorators/watch.js';\nimport { blazorDeepImport } from '../common/decorators/blazorDeepImport.js';\nimport { blazorTwoWayBind } from '../common/decorators/blazorTwoWayBind.js';\nimport { Constructor } from '../common/mixins/constructor.js';\nimport { EventEmitterMixin } from '../common/mixins/event-emitter.js';\n\nimport { Validator, requiredBooleanValidator } from '../common/validators.js';\nimport { FormAssociatedRequiredMixin } from '../common/mixins/form-associated-required.js';\n\nexport interface IgcCheckboxEventMap {\n  igcChange: CustomEvent<boolean>;\n  igcFocus: CustomEvent<void>;\n  igcBlur: CustomEvent<void>;\n}\n\n@blazorDeepImport\nexport class IgcCheckboxBaseComponent extends FormAssociatedRequiredMixin(\n  EventEmitterMixin<IgcCheckboxEventMap, Constructor<LitElement>>(LitElement)\n) {\n  protected override validators: Validator<this>[] = [requiredBooleanValidator];\n\n  @query('input[type=\"checkbox\"]', true)\n  protected input!: HTMLInputElement;\n\n  @queryAssignedNodes({ flatten: true })\n  protected label!: Array<Node>;\n\n  @state()\n  protected focused = false;\n\n  @state()\n  protected hideLabel = false;\n\n  /**\n   * The value attribute of the control.\n   * @attr\n   */\n  @property()\n  public value!: string;\n\n  /**\n   * The checked state of the control.\n   * @attr\n   */\n  @property({ type: Boolean })\n  @blazorTwoWayBind('igcChange', 'detail')\n  public checked = false;\n\n  /**\n   * The label position of the control.\n   * @attr label-position\n   */\n  @property({ reflect: true, attribute: 'label-position' })\n  public labelPosition: 'before' | 'after' = 'after';\n\n  constructor() {\n    super();\n    this.addEventListener('keyup', this.handleKeyUp);\n  }\n\n  @watch('checked')\n  protected checkedChanged() {\n    const value = this.value || 'on';\n    this.checked ? this.setFormValue(value, value) : this.setFormValue(null);\n    this.updateValidity();\n    this.setInvalidState();\n  }\n\n  @watch('focused', { waitUntilFirstUpdate: true })\n  @watch('indeterminate', { waitUntilFirstUpdate: true })\n  protected handleChange() {\n    this.invalid = !this.checkValidity();\n  }\n\n  /** Simulates a click on the control. */\n  public override click() {\n    this.input.click();\n  }\n\n  /** Sets focus on the control. */\n  @alternateName('focusComponent')\n  public override focus(options?: FocusOptions) {\n    this.input.focus(options);\n  }\n\n  /** Removes focus from the control. */\n  @alternateName('blurComponent')\n  public override blur() {\n    this.input.blur();\n  }\n\n  protected handleClick() {\n    this.checked = !this.checked;\n    this.emitEvent('igcChange', { detail: this.checked });\n  }\n\n  protected handleBlur() {\n    this.emitEvent('igcBlur');\n    this.focused = false;\n  }\n\n  protected handleFocus() {\n    this._dirty = true;\n    this.emitEvent('igcFocus');\n  }\n\n  protected handleMouseDown(event: PointerEvent) {\n    event.preventDefault();\n    this.input.focus();\n    this.focused = false;\n  }\n\n  protected handleKeyUp() {\n    if (!this.focused) {\n      this.focused = true;\n    }\n  }\n\n  protected handleSlotChange() {\n    this.hideLabel = this.label.length < 1;\n  }\n}\n"]}