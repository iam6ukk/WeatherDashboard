{"version":3,"file":"tree.js","sourceRoot":"","sources":["../../../src/components/tree/tree.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, LitElement } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { blazorAdditionalDependencies } from '../common/decorators/blazorAdditionalDependencies.js';\nimport { blazorSuppress } from '../common/decorators/blazorSuppress.js';\nimport { watch } from '../common/decorators/watch.js';\nimport { Constructor } from '../common/mixins/constructor.js';\nimport { EventEmitterMixin } from '../common/mixins/event-emitter.js';\nimport { SizableMixin } from '../common/mixins/sizable.js';\nimport { styles } from './themes/light/tree.base.css.js';\nimport { IgcTreeEventMap } from './tree.common.js';\nimport { IgcTreeNavigationService } from './tree.navigation.js';\nimport { IgcTreeSelectionService } from './tree.selection.js';\n\nimport { registerComponent } from '../common/definitions/register.js';\nimport IgcTreeItemComponent from './tree-item.js';\n\n/**\n * The tree allows users to represent hierarchical data in a tree-view structure,\n * maintaining parent-child relationships, as well as to define static tree-view structure without a corresponding data model.\n *\n * @element igc-tree\n *\n * @slot - Renders the tree items inside default slot.\n *\n * @fires igcSelection - Emitted when item selection is changing, before the selection completes.\n * @fires igcItemCollapsed - Emitted when tree item is collapsed.\n * @fires igcItemCollapsing - Emitted when tree item is about to collapse.\n * @fires igcItemExpanded - Emitted when tree item is expanded.\n * @fires igcItemExpanding - Emitted when tree item is about to expand.\n * @fires igcItemActivated - Emitted when the tree's `active` item changes.\n */\n@blazorAdditionalDependencies('IgcTreeItemComponent')\nexport default class IgcTreeComponent extends SizableMixin(\n  EventEmitterMixin<IgcTreeEventMap, Constructor<LitElement>>(LitElement)\n) {\n  public static readonly tagName = 'igc-tree';\n  public static styles = styles;\n\n  public static register() {\n    registerComponent(this, IgcTreeItemComponent);\n  }\n\n  /** @private */\n  @blazorSuppress()\n  public selectionService!: IgcTreeSelectionService;\n  /** @private */\n  @blazorSuppress()\n  public navService!: IgcTreeNavigationService;\n\n  /**\n   * Whether a single or multiple of a parent's child items can be expanded.\n   * @attr single-branch-expand\n   */\n  @property({ attribute: 'single-branch-expand', reflect: true, type: Boolean })\n  public singleBranchExpand = false;\n\n  /**\n   * The selection state of the tree.\n   * @attr\n   */\n  @property({ reflect: true })\n  public selection: 'none' | 'multiple' | 'cascade' = 'none';\n\n  @watch('dir')\n  protected onDirChange(): void {\n    this.items?.forEach((item: IgcTreeItemComponent) => {\n      item.requestUpdate();\n    });\n  }\n\n  @watch('size', { waitUntilFirstUpdate: true })\n  protected onSizeChange(): void {\n    this.items?.forEach((item: IgcTreeItemComponent) => {\n      item.requestUpdate();\n    });\n    this.navService.activeItem?.wrapper?.scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest',\n      inline: 'nearest',\n    });\n  }\n\n  @watch('selection', { waitUntilFirstUpdate: true })\n  protected selectionModeChange(): void {\n    this.selectionService.clearItemsSelection();\n    this.items?.forEach((item: IgcTreeItemComponent) => {\n      item.requestUpdate();\n    });\n  }\n\n  @watch('singleBranchExpand')\n  protected singleBranchExpandChange(): void {\n    if (this.singleBranchExpand) {\n      // if activeItem -> do not collapse its branch\n      if (this.navService.activeItem) {\n        const path = this.navService.activeItem.path;\n        const remainExpanded = new Set(path.splice(0, path.length - 1));\n        this.items.forEach((item) => {\n          if (!remainExpanded.has(item)) {\n            item.collapseWithEvent();\n          }\n        });\n      } else {\n        this.items.forEach((item) => item.collapseWithEvent());\n      }\n    }\n  }\n\n  constructor() {\n    super();\n    this.selectionService = new IgcTreeSelectionService(this);\n    this.navService = new IgcTreeNavigationService(this, this.selectionService);\n  }\n\n  public override connectedCallback(): void {\n    super.connectedCallback();\n    this.setAttribute('role', 'tree');\n    this.addEventListener('keydown', this.handleKeydown);\n    // set init to true for all items which are rendered along with the tree\n    this.items.forEach((i: IgcTreeItemComponent) => {\n      i.init = true;\n    });\n    const firstNotDisabledItem = this.items.find(\n      (i: IgcTreeItemComponent) => !i.disabled\n    );\n    if (firstNotDisabledItem) {\n      firstNotDisabledItem.tabIndex = 0;\n      this.navService.focusItem(firstNotDisabledItem);\n    }\n  }\n\n  /** Returns all of the tree's items. */\n  @blazorSuppress()\n  public get items(): Array<IgcTreeItemComponent> {\n    return Array.from(this.querySelectorAll(`igc-tree-item`));\n  }\n\n  private handleKeydown(event: KeyboardEvent) {\n    this.navService.handleKeydown(event);\n  }\n\n  /** @private */\n  public expandToItem(item: IgcTreeItemComponent): void {\n    if (item && item.parent) {\n      item.path.forEach((i) => {\n        if (i !== item && !i.expanded) {\n          i.expanded = true;\n        }\n      });\n    }\n  }\n\n  /** Select all items if the items collection is empty. Otherwise, select the items in the items collection. */\n  @blazorSuppress()\n  public select(\n    /* alternateType: TreeItemCollection */\n    items?: IgcTreeItemComponent[]\n  ): void {\n    if (!items) {\n      items =\n        this.selection === 'cascade'\n          ? this.items.filter((item: IgcTreeItemComponent) => item.level === 0)\n          : this.items;\n    }\n    this.selectionService.selectItemsWithNoEvent(items);\n  }\n\n  /** Deselect all items if the items collection is empty. Otherwise, deselect the items in the items collection. */\n  @blazorSuppress()\n  public deselect(\n    /* alternateType: TreeItemCollection */\n    items?: IgcTreeItemComponent[]\n  ): void {\n    this.selectionService.deselectItemsWithNoEvent(items);\n  }\n\n  /**\n   * Expands all of the passed items.\n   * If no items are passed, expands ALL items.\n   */\n  @blazorSuppress()\n  public expand(\n    /* alternateType: TreeItemCollection */\n    items?: IgcTreeItemComponent[]\n  ): void {\n    items = items || this.items;\n    items.forEach((item) => (item.expanded = true));\n  }\n\n  /**\n   * Collapses all of the passed items.\n   * If no items are passed, collapses ALL items.\n   */\n  @blazorSuppress()\n  public collapse(\n    /* alternateType: TreeItemCollection */\n    items?: IgcTreeItemComponent[]\n  ): void {\n    items = items || this.items;\n    items.forEach((item) => (item.expanded = false));\n  }\n\n  protected override render() {\n    return html`<slot></slot>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'igc-tree': IgcTreeComponent;\n  }\n}\n"]}