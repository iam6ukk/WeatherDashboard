{"version":3,"file":"toggle.directive.js","sourceRoot":"","sources":["../../../src/components/toggle/toggle.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  computePosition,\n  flip,\n  offset,\n  shift,\n  size,\n  Middleware,\n  autoUpdate,\n  ComputePositionConfig,\n} from '@floating-ui/dom';\nimport {\n  directive,\n  Directive,\n  PartInfo,\n  ElementPart,\n  PartType,\n} from 'lit/directive.js';\nimport { noChange } from 'lit';\nimport type { IgcToggleOptions } from './types.js';\nimport type { IgcToggleController } from './toggle.controller.js';\n\n/* blazorSuppressComponent */\nexport class IgcToggleDirective extends Directive {\n  private part: PartInfo;\n\n  private _floatingElement!: HTMLElement;\n  private _dispose!: Function;\n\n  private target!: HTMLElement;\n  private options!: IgcToggleOptions;\n  private controller?: IgcToggleController;\n\n  private get floatingElement() {\n    if (!this._floatingElement) {\n      this._floatingElement = (this.part as ElementPart).element as HTMLElement;\n    }\n\n    Object.assign(this._floatingElement.style, {\n      display: this.options.open ? '' : 'none',\n    });\n\n    return this._floatingElement;\n  }\n\n  private dispose() {\n    if (this._dispose) {\n      this._dispose();\n    }\n  }\n\n  private notifyController(promise: Promise<void>) {\n    if (this.controller) {\n      this.controller.rendered = promise;\n    }\n  }\n\n  private updatePosition() {\n    this.dispose();\n\n    if (!this.floatingElement || !this.target || !this.options.open) {\n      return noChange;\n    }\n\n    this._dispose = autoUpdate(\n      this.target,\n      this.floatingElement,\n      this.reposition\n    );\n\n    return noChange;\n  }\n\n  private reposition = () => {\n    if (!this.target) {\n      this.dispose();\n      this.notifyController(Promise.resolve());\n      return noChange;\n    }\n\n    const config: Partial<ComputePositionConfig> = {\n      placement: this.options.placement ?? 'bottom-start',\n      strategy: this.options.positionStrategy ?? 'absolute',\n      middleware: this.createMiddleware(this.options),\n    };\n\n    const promise = computePosition(\n      this.target,\n      this.floatingElement,\n      config\n    ).then(({ x, y }) => {\n      Object.assign(this.floatingElement.style, {\n        left: 0,\n        top: 0,\n        transform: `translate(${x}px,${y}px)`,\n      });\n    });\n\n    this.notifyController(promise);\n    return noChange;\n  };\n\n  private createMiddleware(options: IgcToggleOptions) {\n    const middleware: Middleware[] = [];\n    const { style: floatingStyles } = this._floatingElement;\n\n    if (options.distance) {\n      middleware.push(\n        offset({\n          mainAxis: options.distance,\n        })\n      );\n    }\n\n    if (options.flip) {\n      middleware.push(flip());\n    }\n\n    middleware.push(\n      shift({\n        mainAxis: true,\n      })\n    );\n\n    if (options.sameWidth) {\n      middleware.push(\n        size({\n          apply: ({ rects }) => {\n            Object.assign(floatingStyles, {\n              width: `${rects.reference.width}px`,\n            });\n          },\n        })\n      );\n    } else {\n      // Reset previously applied `same-width` styles\n      Object.assign(floatingStyles, { width: '' });\n    }\n\n    return middleware;\n  }\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    this.part = partInfo;\n    if (partInfo.type !== PartType.ELEMENT) {\n      throw new Error(\n        'The `igcToggle` directive must be attached to an element tag.'\n      );\n    }\n  }\n\n  public render(\n    target: HTMLElement,\n    options: IgcToggleOptions,\n    controller?: IgcToggleController\n  ) {\n    Object.assign(this, { target, options, controller });\n    return this.updatePosition();\n  }\n}\n\nexport const igcToggle = directive(IgcToggleDirective);\n"]}