import { computePosition, flip, offset, shift, size, autoUpdate, } from '@floating-ui/dom';
import { directive, Directive, PartType, } from 'lit/directive.js';
import { noChange } from 'lit';
export class IgcToggleDirective extends Directive {
    get floatingElement() {
        if (!this._floatingElement) {
            this._floatingElement = this.part.element;
        }
        Object.assign(this._floatingElement.style, {
            display: this.options.open ? '' : 'none',
        });
        return this._floatingElement;
    }
    dispose() {
        if (this._dispose) {
            this._dispose();
        }
    }
    notifyController(promise) {
        if (this.controller) {
            this.controller.rendered = promise;
        }
    }
    updatePosition() {
        this.dispose();
        if (!this.floatingElement || !this.target || !this.options.open) {
            return noChange;
        }
        this._dispose = autoUpdate(this.target, this.floatingElement, this.reposition);
        return noChange;
    }
    createMiddleware(options) {
        const middleware = [];
        const { style: floatingStyles } = this._floatingElement;
        if (options.distance) {
            middleware.push(offset({
                mainAxis: options.distance,
            }));
        }
        if (options.flip) {
            middleware.push(flip());
        }
        middleware.push(shift({
            mainAxis: true,
        }));
        if (options.sameWidth) {
            middleware.push(size({
                apply: ({ rects }) => {
                    Object.assign(floatingStyles, {
                        width: `${rects.reference.width}px`,
                    });
                },
            }));
        }
        else {
            Object.assign(floatingStyles, { width: '' });
        }
        return middleware;
    }
    constructor(partInfo) {
        super(partInfo);
        this.reposition = () => {
            var _a, _b;
            if (!this.target) {
                this.dispose();
                this.notifyController(Promise.resolve());
                return noChange;
            }
            const config = {
                placement: (_a = this.options.placement) !== null && _a !== void 0 ? _a : 'bottom-start',
                strategy: (_b = this.options.positionStrategy) !== null && _b !== void 0 ? _b : 'absolute',
                middleware: this.createMiddleware(this.options),
            };
            const promise = computePosition(this.target, this.floatingElement, config).then(({ x, y }) => {
                Object.assign(this.floatingElement.style, {
                    left: 0,
                    top: 0,
                    transform: `translate(${x}px,${y}px)`,
                });
            });
            this.notifyController(promise);
            return noChange;
        };
        this.part = partInfo;
        if (partInfo.type !== PartType.ELEMENT) {
            throw new Error('The `igcToggle` directive must be attached to an element tag.');
        }
    }
    render(target, options, controller) {
        Object.assign(this, { target, options, controller });
        return this.updatePosition();
    }
}
export const igcToggle = directive(IgcToggleDirective);
//# sourceMappingURL=toggle.directive.js.map