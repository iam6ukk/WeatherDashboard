var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { queryAssignedNodes } from 'lit/decorators.js';
import { watch } from '../common/decorators/watch.js';
import { registerComponent } from '../common/definitions/register.js';
import IgcDropdownItemComponent from '../dropdown/dropdown-item.js';
import { extractText } from '../common/util.js';
class IgcSelectItemComponent extends IgcDropdownItemComponent {
    static register() {
        registerComponent(this);
    }
    activeChange() {
        this.tabIndex = this.active ? 0 : -1;
        if (this.active) {
            this.focus();
        }
    }
    get textContent() {
        return extractText(this.content).join(' ');
    }
    set textContent(value) {
        const text = new Text(value);
        this.content.forEach((n) => n.remove());
        this.appendChild(text);
    }
}
IgcSelectItemComponent.tagName = 'igc-select-item';
__decorate([
    queryAssignedNodes({ flatten: true })
], IgcSelectItemComponent.prototype, "content", void 0);
__decorate([
    watch('active')
], IgcSelectItemComponent.prototype, "activeChange", null);
export default IgcSelectItemComponent;
//# sourceMappingURL=select-item.js.map