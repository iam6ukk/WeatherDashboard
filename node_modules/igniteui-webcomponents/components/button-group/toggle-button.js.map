{"version":3,"file":"toggle-button.js","sourceRoot":"","sources":["../../../src/components/button-group/toggle-button.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AACvC,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,EAAE,MAAM,EAAE,MAAM,oCAAoC,CAAC;AAC5D,OAAO,EAAE,MAAM,EAAE,MAAM,sEAAsE,CAAC;AAC9F,OAAO,EAAE,MAAM,IAAI,SAAS,EAAE,MAAM,2EAA2E,CAAC;AAChH,OAAO,EAAE,MAAM,IAAI,MAAM,EAAE,MAAM,wEAAwE,CAAC;AAC1G,OAAO,EAAE,MAAM,IAAI,MAAM,EAAE,MAAM,wEAAwE,CAAC;AAC1G,OAAO,EAAE,MAAM,IAAI,QAAQ,EAAE,MAAM,0EAA0E,CAAC;AAC9G,OAAO,EAAE,aAAa,EAAE,MAAM,uCAAuC,CAAC;AACtE,OAAO,EAAE,iBAAiB,EAAE,MAAM,mCAAmC,CAAC;AAgBtE,IAAqB,wBAAwB,GAA7C,MAAqB,wBAAyB,SAAQ,UAAU;IAAhE;;QA6BS,aAAQ,GAAG,KAAK,CAAC;QAOjB,aAAQ,GAAG,KAAK,CAAC;IAiC1B,CAAC;IA3DQ,MAAM,CAAC,QAAQ;QACpB,iBAAiB,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;IA4Be,KAAK,CAAC,OAAsB;QAC1C,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAIe,IAAI;QAClB,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;IAC5B,CAAC;IAGe,KAAK;QACnB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;IAC7B,CAAC;IAEkB,MAAM;QACvB,OAAO,IAAI,CAAA;;;;oBAIK,IAAI,CAAC,QAAQ;qBACZ,IAAI,CAAC,SAAS;uBACZ,IAAI,CAAC,QAAQ;wBACZ,IAAI,CAAC,QAAQ;;;;KAIhC,CAAC;IACJ,CAAC;;AAnEsB,+BAAM,GAAG,MAAM,AAAT,CAAU;AAEhB,gCAAO,GAAG,mBAAmB,AAAtB,CAAuB;AAE9B,0CAAiB,GAAG;IACzC,GAAG,UAAU,CAAC,iBAAiB;IAC/B,cAAc,EAAE,IAAI;CACrB,AAHuC,CAGtC;AAOM;IADP,KAAK,CAAC,iBAAiB,EAAE,IAAI,CAAC;+DACK;AAO7B;IADN,QAAQ,EAAE;uDACW;AAOf;IADN,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;0DACnB;AAOjB;IADN,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;0DACnB;AAIR;IADf,aAAa,CAAC,gBAAgB,CAAC;qDAG/B;AAIe;IADf,aAAa,CAAC,eAAe,CAAC;oDAG9B;AAhDkB,wBAAwB;IAJ5C,MAAM,CAAC;QACN,KAAK,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE;QAC9C,IAAI,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE;KAC9C,CAAC;GACmB,wBAAwB,CAqE5C;eArEoB,wBAAwB","sourcesContent":["import { LitElement, html } from 'lit';\nimport { property, query } from 'lit/decorators.js';\nimport { themes } from '../../theming/theming-decorator.js';\nimport { styles } from '../button-group/themes/light/toggle-button/toggle-button.base.css.js';\nimport { styles as bootstrap } from '../button-group/themes/light/toggle-button/toggle-button.bootstrap.css.js';\nimport { styles as fluent } from '../button-group/themes/light/toggle-button/toggle-button.fluent.css.js';\nimport { styles as indigo } from '../button-group/themes/light/toggle-button/toggle-button.indigo.css.js';\nimport { styles as material } from '../button-group/themes/light/toggle-button/toggle-button.material.css.js';\nimport { alternateName } from '../common/decorators/alternateName.js';\nimport { registerComponent } from '../common/definitions/register.js';\n\n/**\n * The `igc-toggle-button` wraps a native button element and exposes additional `value` and `selected` properties.\n * It is used in the context of an `igc-button-group` to facilitate the creation of group/toolbar like UX behaviors.\n *\n * @element igc-toggle-button\n *\n * @slot Renders the label/content of the button.\n *\n * @csspart toggle - The native button element.\n */\n@themes({\n  light: { bootstrap, material, fluent, indigo },\n  dark: { bootstrap, material, fluent, indigo },\n})\nexport default class IgcToggleButtonComponent extends LitElement {\n  public static override styles = styles;\n\n  public static readonly tagName = 'igc-toggle-button';\n\n  public static override shadowRootOptions = {\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  };\n\n  public static register() {\n    registerComponent(this);\n  }\n\n  @query('[part=\"toggle\"]', true)\n  private nativeElement!: HTMLElement;\n\n  /**\n   * The value attribute of the control.\n   * @attr\n   */\n  @property()\n  public value!: string;\n\n  /**\n   * Determines whether the button is selected.\n   * @attr\n   */\n  @property({ type: Boolean, reflect: true })\n  public selected = false;\n\n  /**\n   * Determines whether the button is disabled.\n   * @attr\n   */\n  @property({ type: Boolean, reflect: true })\n  public disabled = false;\n\n  /** Sets focus on the button. */\n  @alternateName('focusComponent')\n  public override focus(options?: FocusOptions) {\n    this.nativeElement.focus(options);\n  }\n\n  /** Removes focus from the button. */\n  @alternateName('blurComponent')\n  public override blur() {\n    this.nativeElement.blur();\n  }\n\n  /** Simulates a mouse click on the element. */\n  public override click() {\n    this.nativeElement.click();\n  }\n\n  protected override render() {\n    return html`\n      <button\n        part=\"toggle\"\n        type=\"button\"\n        .disabled=${this.disabled}\n        .ariaLabel=${this.ariaLabel}\n        aria-pressed=${this.selected}\n        aria-disabled=${this.disabled}\n      >\n        <slot></slot>\n      </button>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'igc-toggle-button': IgcToggleButtonComponent;\n  }\n}\n"]}