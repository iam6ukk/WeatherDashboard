var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, LitElement } from 'lit';
import { property } from 'lit/decorators.js';
import { themes } from '../../theming/theming-decorator.js';
import { registerComponent } from '../common/definitions/register.js';
import { partNameMap } from '../common/util.js';
import IgcNavDrawerHeaderItemComponent from './nav-drawer-header-item.js';
import IgcNavDrawerItemComponent from './nav-drawer-item.js';
import { styles } from './themes/light/nav-drawer.base.css.js';
import { styles as bootstrap } from './themes/light/nav-drawer.bootstrap.css.js';
import { styles as fluent } from './themes/light/nav-drawer.fluent.css.js';
import { styles as indigo } from './themes/light/nav-drawer.indigo.css.js';
import { styles as material } from './themes/light/nav-drawer.material.css.js';
let IgcNavDrawerComponent = class IgcNavDrawerComponent extends LitElement {
    constructor() {
        super(...arguments);
        this.position = 'start';
        this.open = false;
    }
    static register() {
        registerComponent(this, IgcNavDrawerHeaderItemComponent, IgcNavDrawerItemComponent);
    }
    show() {
        if (this.open) {
            return;
        }
        this.open = true;
    }
    hide() {
        if (!this.open) {
            return;
        }
        this.open = false;
    }
    toggle() {
        if (this.open) {
            this.hide();
        }
        else {
            this.show();
        }
    }
    resolvePartNames(base) {
        const mini = document.querySelector('div[slot="mini"]');
        const hasChildren = mini !== null && mini.children.length > 0;
        return {
            [base]: true,
            hidden: !hasChildren,
        };
    }
    render() {
        return html `
      <div part="overlay" @click=${this.hide}></div>

      <div part="base">
        <div part="main">
          <slot></slot>
        </div>
      </div>

      <div part="${partNameMap(this.resolvePartNames('mini'))}">
        <slot name="mini"></slot>
      </div>
    `;
    }
};
IgcNavDrawerComponent.tagName = 'igc-nav-drawer';
IgcNavDrawerComponent.styles = styles;
__decorate([
    property({ reflect: true })
], IgcNavDrawerComponent.prototype, "position", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], IgcNavDrawerComponent.prototype, "open", void 0);
IgcNavDrawerComponent = __decorate([
    themes({
        light: { indigo, material, fluent, bootstrap },
        dark: { indigo, material, fluent, bootstrap },
    })
], IgcNavDrawerComponent);
export default IgcNavDrawerComponent;
//# sourceMappingURL=nav-drawer.js.map