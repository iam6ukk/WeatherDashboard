import { adoptStyles, css, } from 'lit';
import { getTheme } from './config.js';
import { CHANGE_THEME_EVENT } from './theming-event.js';
class ThemeEventListeners {
    constructor() {
        this.listeners = new Set();
        this.handleEvent = () => {
            for (const listener of this.listeners) {
                listener();
            }
        };
    }
    add(listener) {
        window.addEventListener(CHANGE_THEME_EVENT, this);
        this.listeners.add(listener);
    }
    remove(listener) {
        this.listeners.delete(listener);
        if (this.listeners.size < 1) {
            window.removeEventListener(CHANGE_THEME_EVENT, this);
        }
    }
}
const _themingEventListeners = new ThemeEventListeners();
class ThemingController {
    constructor(host, themes) {
        this.themeChanged = () => {
            this.adoptStyles();
            this.host.requestUpdate();
        };
        this.host = host;
        this.themes = themes;
    }
    hostConnected() {
        this.adoptStyles();
        _themingEventListeners.add(this.themeChanged);
    }
    hostDisconnected() {
        _themingEventListeners.remove(this.themeChanged);
    }
    adoptStyles() {
        var _a;
        const { theme, themeVariant } = getTheme();
        this.theme = theme;
        this.themeVariant = themeVariant;
        const ctor = this.host.constructor;
        const [_, cssResult] = (_a = Object.entries(this.themes[themeVariant]).find(([name]) => name === this.theme)) !== null && _a !== void 0 ? _a : [];
        adoptStyles(this.host.shadowRoot, [
            ...ctor.elementStyles,
            cssResult !== null && cssResult !== void 0 ? cssResult : css ``,
        ]);
    }
}
const _updateWhenThemeChanges = (host, themes, exposeTheme) => {
    const controller = new ThemingController(host, themes);
    host.addController(controller);
    if (exposeTheme) {
        Object.defineProperty(host, themeSymbol, {
            get() {
                return controller.theme;
            },
            configurable: true,
            enumerable: false,
        });
    }
    return controller;
};
export const updateWhenThemeChanges = _updateWhenThemeChanges;
export const themeSymbol = Symbol('Current active theme');
//# sourceMappingURL=theming-controller.js.map